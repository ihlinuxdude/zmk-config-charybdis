#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    chosen { zmk,matrix_transform = &default_transform; };
};

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

&lt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
            &kp TAB       &kp Q       &kp W       &kp E       &kp R       &kp T    &kp Y       &kp U       &kp I       &kp O       &kp P       &kp BACKSPACE
            &kp LCTRL    &kp A       &kp S       &kp D       &kp F       &kp G     &kp H       &kp J       &kp K       &kp L       &kp SEMICOLON   &lt 8 APOS
            &lt 4 UP     &kp Z       &kp X       &kp C       &kp V       &kp B     &kp N       &kp M       &kp COMMA   &kp DOT    &lt 7 DOWN    &none
            &lt 1 ESC    &mo 6       &mt LALT LPAR    &mt LGUI SPACE     &kp DEL    &mt RGUI ENTER
                        &mt RALT RPAR           &tog 2
            >;
        };

        NAV {
            bindings = <
            &kp F12       &kp F1       &kp F2       &kp F3       &kp F4       &kp F5       &kp F6       &kp F7       &kp F8       &kp F9       &kp F10       &kp F11
            &trans       &kp SCROLLLOCK       &kp PAUSE_BREAK       &kp UP       &kp EQUAL       &kp LBRC       &kp RBRC       &kp N7       &kp N8       &kp N9       &kp KP_PLUS       &trans
            &kp PRINTSCREEN  &kp INSERT      &kp LEFT        &kp DOWN           &kp RIGHT         &kp LBKT            &kp RBKT    &kp N4    &kp N5    &kp N6    &kp KP_MINUS      &kp KP_DIVIDE
            &trans          &kp DEL         &kp PG_UP        &kp CAPS           &kp PG_DN         &kp LPAR            &kp RPAR    &kp N1    &kp N2     &kp N3    &kp KP_MULTIPLY   &trans
                        &trans          &trans           &kp C_VOLUME_DOWN   &kp C_VOLUME_UP   &trans    &kp KP_DOT            &kp N0          &mo 3
            >;
        };

        NUM {
            bindings = <
            &kp TILDE   &kp EXCL   &kp AT   &kp HASH   &kp DLLR   &kp PRCNT    &kp CARET   &kp AMPS   &kp STAR   &kp MINUS   &kp EQUAL   &kp BACKSPACE
            &kp N0      &kp N1     &kp N2     &kp N3     &kp N4     &kp N5     &kp N6     &kp N7     &kp N8     &kp N9     &kp N0     &lt 8 ENTER
            &trans   &kp GRAVE   &kp SLASH   &kp BACKSLASH   &kp LBRC   &kp LBKT   &kp RBKT   &kp RBRC   &kp COMMA   &kp DOT   &kp PIPE   &trans
            &trans   &trans   &trans   &trans   &trans   &trans   &trans   &trans
            >;
        };

        ADJ {
            bindings = <
            &kp F12  &kp F1       &kp F2          &kp F3            &kp F4             &kp F5             &kp F6                &kp F7      &kp F8      &kp F9      &kp F10       &kp F11
            &trans   &sys_reset   &bt BT_PRV      &bt BT_NXT        &bt BT_CLR         &out OUT_TOG       &bt BT_SEL 0  &bt BT_CLR  &bt BT_PRV  &bt BT_NXT  &sys_reset    &trans
            &trans   &bootloader  &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT         &kp C_MUTE         &bt BT_SEL 1  &mkp MB1    &mkp MB2    &mkp MB3    &bootloader  &trans
            &trans   &trans       &mo 5           &mo 4             &kp C_VOLUME_DOWN  &kp C_VOLUME_UP    &bt BT_SEL 2  &trans      &mo 4       &mo 5       &trans        &trans
                      &trans       &trans          &trans            &trans             &trans                  &trans                &trans                  &trans
            >;
        };

        MOUSE {
            bindings = <
            &trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans    &trans    &trans    &trans  &trans
            &trans  &trans  &trans  &trans  &trans  &trans          &trans    &trans    &trans    &trans    &trans  &trans
            &trans  &trans  &trans  &trans  &trans  &trans          &trans    &mkp MB1  &mkp MB2  &mkp MB3  &trans  &trans
            &trans  &trans  &mo 5   &trans  &trans  &trans          &trans    &trans    &trans    &mo 5     &trans  &trans
                    &trans  &trans  &trans  &trans  &trans  &trans          &trans    &trans
            >;
        };

        SCROLL {
            bindings = <
            &trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans    &trans    &trans    &trans  &trans
            &trans  &trans  &trans  &trans  &trans  &trans          &trans    &trans    &trans    &trans    &trans  &trans
            &trans  &trans  &trans  &trans  &trans  &trans          &trans    &mkp MB1  &mkp MB2  &mkp MB3  &trans  &trans
            &trans  &trans  &trans  &trans  &trans  &trans          &trans    &trans    &trans    &trans    &trans  &trans
                    &trans  &trans  &trans  &trans  &trans  &trans          &trans    &trans
            >;
        };

        EMACS {
            bindings = <
            &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
            &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
            &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans &trans
            &trans &trans &trans &trans &trans &trans &trans &mo 7
            >;
        };

        HYPM {
            bindings = <
            &none &none &none &none &none &none &none &none &none &none &none &none
            &none &kp RG(Q) &kp RG(W) &kp RG(E) &kp RG(R) &kp RG(T) &kp RG(Y) &kp RG(U) &kp RG(I) &kp RG(O) &kp RG(P) &none
            &none &kp RG(A) &kp RG(S) &kp RG(D) &kp RG(F) &kp RG(G) &kp RG(H) &kp RG(J) &kp RG(K) &kp RG(L) &none &none
            &none &kp RG(Z) &kp RG(X) &kp RG(C) &kp RG(V) &kp RG(B) &kp RG(N) &kp RG(M) &none &none &none &none
            &trans &trans &trans &trans &trans &trans &trans &trans
            >;
        };

        MOVE {
            bindings = <
            &none &none &none &none &none &none &none &none &none &none &none &none
            &none &none &kp PG_UP &none &none &none   &none &none &none &none &none &none
            &trans &kp HOME &kp PG_DN &trans &trans &kp END  &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
            &kp LCTRL &trans &trans &trans &kp LSHIFT &trans &trans &trans
            >;
        };
    };
};
